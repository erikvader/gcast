* What is this?
A media server, sort of. Run this on a computer connected to a TV and
control it using a phone. This application supports playing local
video files using [[https://mpv.io/][mpv]] (or rather [[https://github.com/mpv-player/mpv/blob/master/libmpv/client.h][its C API]]), a whole lot of video from
the internet with [[https://github.com/yt-dlp/yt-dlp][yt-dlp]] (or whatever mpv uses in the background),
and listening to music using [[https://www.spotify.com/se/premium/][spotify]] with [[https://support.spotify.com/us/article/spotify-connect/][spotify connect]].
* Behind the scenes
This project is made with [[https://www.rust-lang.org/][rust]], compiled to both x86, or whatever, and
[[https://www.rust-lang.org/what/wasm][webassembly]]. The project is divided into two main components (or
crates): =server= and =client=.
** Crate: Server
This is a web server that maintains state, knows what processes are
activate and not, whether a video is playing or not, etc. It is the
main program of the project. It communicates via websockets to a
client that might connect using a phone.
** Crate: Client
This is the "mobile app" served as a simple website. The UI is made
with [[https://yew.rs/][yew]], a very [[https://reactjs.org/][react]]-inspired framework. So the frontend is made in
rust and executed on a web browser as a webassembly application. This
"app" is designed like a [[https://en.wikipedia.org/wiki/Thin_client][thin client]], it simply renders what the
server tells it to and has minimal logic and processing.
** All other crates
- =cli=: Binaries used for testing without having a fully running
  environment.
- =protocol=: Shared data structures that define the communication
  interface between the client and the server.
- =protocol-macros=: Procedural macros for the protocol crate.
- =searcher=: A search engine that simply searches through a bunch of
  strings, like video file paths, using syntax inspired by [[https://github.com/abo-abo/swiper#swiper][swiper]].
* Installation
The missing values in =deploy-config.def.mk= needs to be filled in
first and the file saved as =deploy-config.mk=. Then basically run
~make -C client deploy~ and ~make -C server deploy~.

** First time setup
Some manual work needs to be performed the first time this is deployed.

First, build and sync:
#+BEGIN_SRC sh
make -C client deploy-build deploy-sync
make -C server deploy-build deploy-sync
#+END_SRC

Then, on the server, make the service file known to systemd:
#+BEGIN_SRC sh
systemctl --user link ~/gcast/client/gcast-client.service
systemctl --user link ~/gcast/server/gcast-server.service
#+END_SRC

Then enable it by adding a ~wants~ to some target, e.g. one that is
started by your window manager ([[https://superuser.com/a/1128905][source]]):
#+BEGIN_SRC sh
systemctl --user add-wants xmonad.target gcast-client.service
systemctl --user add-wants xmonad.target gcast-server.service
#+END_SRC

The server also has a config that needs to be placed at
=~/.config/gcast/config.toml=. A default with comments is available at
=server/config-default.toml=.

** Very different machines
Since the =server= binary depends on shared libraries, particularly
libmpv, it is possible to build the application on the remote machine
using ~make -C server deploy-remote~, rather than simply copying a
locally built binary like ~make -C server deploy~ does.

** Port 80 without root
Non-root processes can't create a socket on any port below 1024.

Create a rule with iptables to redirect all tcp traffic to port 80 to
port 8080 ([[https://serverfault.com/a/112798][source]]):
#+BEGIN_SRC sh
sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080
#+END_SRC

The following will reject connections directly to 8080 ([[https://serverfault.com/a/1019123][source]]):
#+BEGIN_SRC sh
sudo iptables -A INPUT -p tcp --dport 8080 -m conntrack --ctstate DNAT -j ACCEPT
sudo iptables -A INPUT -p tcp --dport 8080 -m conntrack --ctstate INVALID -j DROP
sudo iptables -A INPUT -p tcp --dport 8080 -j REJECT
#+END_SRC

Save it and enable a systemd service that will restore this
configuration ([[https://wiki.archlinux.org/title/iptables#Configuration_and_usage][source]]):
#+BEGIN_SRC sh
sudo iptables-save -f /etc/iptables/iptables.rules
sudo systemctl enable iptables.service
#+END_SRC
